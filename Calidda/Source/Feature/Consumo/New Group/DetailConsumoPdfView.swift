//
//  RegisterView.swift
//  App
//
//  Created by Raul Quispe on 5/31/20.
//  Copyright Â© 2020 Raul Quispe. All rights reserved.
//
  
import UIKit
import RxSwift
import TinyConstraints
import Alamofire
class DetailConsumoPdfView: UIViewController {
    //var style: Style = Style.myApp
    var router:Router!
    
    @IBOutlet var viwBackContent:UIView!
    @IBOutlet var viwBackUser:UIView!
    @IBOutlet var emailTexfield:UITextField!
    
    var base64String:String = ""
    @IBOutlet var viewWeb:UIWebView!
    
    let disposebag = DisposeBag()
    private let presenter = DetailConsumoPdfPresenter(loginService: AuthenticationService())
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
    }
    func setupUI(){
        self.viewWeb.isOpaque = false;
        self.viewWeb.backgroundColor = UIColor.clear
        
        self.base64String = ""
               if let decodeData = Data(base64Encoded: self.base64String, options: .ignoreUnknownCharacters) {
                   self.viewWeb.load(decodeData, mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", textEncodingName: "utf-8", baseURL: URL(fileURLWithPath: ""))
                
               }
        
  
       // let fromDataToString = String(data: download.fileContent!, encoding: .isoLatin1)
       // let fromStringToData = Data(base64Encoded: fromDataToString!, options: .ignoreUnknownCharacters)
        
        
        
            let destination: DownloadRequest.Destination = { _, _ in
                             let documentsURL = FileManager.default.urls(for: .picturesDirectory, in: .userDomainMask)[0]
                                 let fileURL = documentsURL.appendingPathComponent("f_1312015203355628490.xls")
                                 return (fileURL, [.removePreviousFile, .createIntermediateDirectories])
                         }
                         AF.download("https://s3-eu-west-1.amazonaws.com/schooly/handasaim/news/", to: destination).response { response in
                             debugPrint(response)
                             if response.error == nil, let imagePath = response.fileURL?.path {
                                 let image = UIImage(contentsOfFile: imagePath)
                             }
                         }
        
       
    }
    @IBAction func goToBack(){
        router.pop(sender: self)
    }

    
}
